from telegram import Update
from telegram.ext import ContextTypes
import logging
import json
import asyncio

from posterData import PosterData 
from message_queue_manager import MessageQueueManager 


hui = PosterData

logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–µ–π ---
mq_manager_instance: MessageQueueManager | None = None

async def initialize_mq_for_bot():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ –∏ –æ–±—ä—è–≤–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.
    –ë—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
    """
    global mq_manager_instance
    if mq_manager_instance is None:
        mq_manager_instance = MessageQueueManager()
        try:
            await mq_manager_instance.connect()
            await mq_manager_instance.declare_exchange("parsing_exchange", type='topic')
            logger.info("Handlers: RabbitMQ connection and exchanges initialized for bot.")
        except Exception as e:
            logger.error(f"Handlers: Failed to initialize RabbitMQ connection: {e}")
            raise 

def format_prediction(data: dict) -> str:
    predicted_price = data.get('predicted_price', 'N/A')
    address = data.get('address', 'N/A')
    url = data.get('url', 'N/A')
    request_id = data.get('request_id', 'N/A')

    message_parts = [
        f"*–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã* (–ó–∞–ø—Ä–æ—Å: `{request_id}`)\n",
        f"üè† *–ê–¥—Ä–µ—Å:* {address}\n",
        f"üí∞ *–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è —Ü–µ–Ω–∞:* {predicted_price} ‚ÇΩ/–º–µ—Å\n",
        f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({url})"
    ]
    return "\n".join(message_parts)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üè° –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –¶–ò–ê–ù –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∞—Ä–µ–Ω–¥—ã.")

async def handle_cian_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text
    chat_id = update.message.chat_id
    request_id = str(chat_id) + "_" + str(update.message.message_id) # –ü—Ä–æ—Å—Ç–æ–π request_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

    if not mq_manager_instance or not mq_manager_instance.connection:
        logger.error("RabbitMQ manager not initialized or connected.")
        await update.message.reply_text("üîß –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
        message_to_send = {
            "url": url,
            "chat_id": chat_id, # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –ø–æ –ø–∞–π–ø–ª–∞–π–Ω—É
            "request_id": request_id
        }

        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –ø–∞—Ä—Å–µ—Ä–∞
        await mq_manager_instance.publish_message(
            exchange_name="parsing_exchange",
            routing_key="parse.cian_flat_rent",
            message_body=json.dumps(message_to_send)
        )
        logger.info(f"[{request_id}] URL '{url}' sent to parsing queue.")
        await update.message.reply_text("‚è≥ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")

    except Exception as e:
        logger.error(f"[{request_id}] Error sending URL to MQ: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")